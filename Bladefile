local sh = require('sh')

--<version> [name] [description] - cross compile and create release on Github
function target.release(version, name, description)
	assert(version, "fatal: no version specified")

	name = name or string.format("git-build-state %s", version)
	description = description or string.format("git-build-state %s", version)
	preRelease = ""

	if not string.match(version, "^v%d[.]%d[.]%d$") then
		if string.match(version, "^v%d[.]%d[.]%d%-beta%d$") then
			preRelease = "--pre-release"
		else
			error("fatal: version must be on the form 'vX.X.X'")
		end
	end

	exitCode, output = blade._exec('git status --porcelain')
	if output ~= "" then
		error("fatal: uncommited changes")
	end

	target.build(version)
	blade.sh(string.format("git tag -a %s -m '%s'", version, description))
	blade.sh('git push origin ' .. version)

	blade.sh(string.format("github-release release --user otm --repo git-build-state --tag %s --name '%s' --description '%s' %s", version, name, description, preRelease))

	for file in io.popen("ls -1 git-build-state_*"):lines() do
		code = blade.system(string.format("github-release upload --user otm --repo git-build-state --tag %s --name %s --file %s", version, file, file))
		blade.printStatus(file, code)
	end
end

-- blade.flag(target.release, function(flag)
-- 	flag:string("version", "version", "The version to release", function()
-- 		return sh.git("tag"):stdout()
-- 	end)
-- 	flag:stringArg("name", 1, "The name of the release")
-- 	flag:stringArg("description", 1, "The description of the release")
-- end)

-- blade.compgen(target.release, function(compWords, compCWord)
-- 	if compCWord == 1 then
-- 		code, out = blade._sh("git tag")
-- 		return out
-- 	end
-- end)

--clean working directory of builds
function target.clean()
	blade.exec("rm git-build-state git-build-state_*")
end

--cross compile
function target.build(version, date)
	sh.go("generate")
	version = version or "dev-build"
	date = os.date("%Y-%m-%d %H:%M:%S")
	ldflags=string.format("-X main.version=%s -X 'main.date=%s'", version, date)
	sh.gox("-os", "linux darwin", "-ldflags", ldflags):print()
end

--download, install and setup gox for cross compile
function target.goxSetup()
	blade.sh("go get github.com/mitchellh/gox")
	blade.sh("go install github.com/mitchellh/gox")
	go("gox -build-toolchain", {sudo=true})
end

function gocmd(cmd)
	code, gopath = blade.system("go env GOPATH")
	gopath = (gopath:gsub("^%s*(.-)%s*$", "%1"))
	return gopath .. "/bin/" .. cmd
end

function go(cmd, options)
	code, gopath = blade.system("go env GOPATH")
	gopath = (gopath:gsub("^%s*(.-)%s*$", "%1"))
	cmd = gopath .. "/bin/" .. cmd

	print(cmd)
	if options and options.sudo then
		return sh.sudo(cmd):print()
	end

	return sh(cmd):print()
end
